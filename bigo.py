"""
On my/our honor, Shasa Lloyd Kolar and Ethan Gomez, this 
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: SLK2633
UT EID 2: EGB664
"""


def length_of_longest_substring_n3(s):
	max_length = 0
	for beginning in range(len(s)):
		length = []
		for end in range(beginning, len(s)):
			s_substring = s[beginning:]
			if s_substring.count(s[end]) == 1:
				length.append(len(s_substring)-(end-beginning))
			else:
				length.clear()
		max_length = max(max_length, length[0])
	return max_length


def length_of_longest_substring_n2(s):
	#This function works, just not 100% sure if this is O(N^2)
	max_length = 0

	for start in range(len(s)):
		freq_list = [0] * 256

		for end in range(len(s)):
			char_index = ord(s[end])
			freq_list[char_index] += 1

			if freq_list[char_index] > 1:
				break
			max_length = max(max_length, end - start + 1)
	return max_length


def length_of_longest_substring_n(s):
	#This code is based off the google doc instructions, my bad.
	#Couldn't figure out the other way

	#Keeps track of char using frequency list
	freq_list = [0] * 256
	max_length = 0
	start = 0

	#convert s[end] to ASCII & adds it to frequency list
	for end in range(len(s)):
		char_index = ord(s[end])
		freq_list[char_index] += 1

		#moves start pointer to the right by one & removes duplicate char from list
		while freq_list[char_index] > 1:
			freq_list[ord(s[start])] -= 1
			start += 1

		#Tracks max ss length
		max_length = max(max_length, end - start + 1)
	
	return max_length
